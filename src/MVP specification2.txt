Enibla MVP Specification
Architecture

Enibla Architecture Diagram

The architecture diagram above represents the end-to-end flow of data in the Enibla food delivery application. The diagram includes the following labeled components:

    Web Client: The user interface where customers can browse restaurants, view menus, place orders, and track deliveries.
    Web Server: Handles the logic and communication between the web client and other components of the system.
    Database: Stores various types of data such as user information, restaurant details, menu items, orders, and delivery status.
    Payment Gateway: Integrates with external payment service providers to securely process customer payments.
    Notification Service: Sends real-time notifications to customers regarding order updates and delivery status.
    Geolocation Service: Utilizes GPS technology to track the location of delivery drivers and provide accurate estimated delivery times.

APIs and Methods
Web Client to Web Server APIs

    /api/restaurants
        GET: Returns a list of available restaurants with their details (name, cuisine, ratings, etc.).
    /api/menu/{restaurant_id}
        GET: Retrieves the menu items of a specific restaurant identified by restaurant_id.
    /api/order
        POST: Creates a new order with the specified items, quantities, and delivery details.
    /api/order/{order_id}
        GET: Retrieves the details of a specific order identified by order_id.
    /api/order/{order_id}/cancel
        POST: Cancels an existing order identified by order_id.
    /api/order/{order_id}/track
        GET: Retrieves the real-time tracking information for an order identified by order_id.

APIs and Functions for Other Clients

    class User
        Represents a user in the system with attributes such as id, name, email, and address.
        Methods:
            get_user(user_id): Retrieves the user's information based on the user_id.
            create_user(user_data): Creates a new user with the provided data.
            update_user(user_id, updated_data): Updates the user's information with the provided data.
            delete_user(user_id): Deletes the user's account.

    class Restaurant
        Represents a restaurant in the system with attributes such as id, name, cuisine, and ratings.
        Methods:
            get_restaurant(restaurant_id): Retrieves the restaurant's information based on the restaurant_id.
            create_restaurant(restaurant_data): Creates a new restaurant with the provided data.
            update_restaurant(restaurant_id, updated_data): Updates the restaurant's information with the provided data.
            delete_restaurant(restaurant_id): Deletes a restaurant from the system.

3rd Party APIs

    Google Maps Geocoding API: Used to convert addresses into geographical coordinates for accurate location-based services.
    Stripe API: Integrated for secure payment processing and handling transactions between customers and restaurants.
    Twilio API: Utilized for sending SMS notifications to customers regarding order updates and delivery status.

Data Model

The data model diagram below illustrates the structure and relationships of the main entities within the Enibla food delivery application:

sql

+----------------+          +---------------+          +-----------------+          +-------------+
|     User       |    1     |   Order       |
